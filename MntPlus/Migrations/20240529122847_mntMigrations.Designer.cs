// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace MntPlus.WPF.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240529122847_mntMigrations")]
    partial class mntMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AssetCommissionDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AssetImage")
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("AssetParent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PurchaseCost")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetParent");

                    b.HasIndex("LocationId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Cost")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinimumQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PartID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Entities.LinkPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PartId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PartId");

                    b.ToTable("LinkParts");
                });

            modelBuilder.Entity("Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimaryLocation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdParent");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPerformed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextDue")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("PreventiveMaintenances");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenanceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChangedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreventiveMaintenanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("PreventiveMaintenanceId");

                    b.ToTable("PreventiveMaintenanceHistories");
                });

            modelBuilder.Entity("Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requester")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubmittedById")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedById");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSeeded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeek")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Month")
                        .HasColumnType("TEXT");

                    b.Property<string>("Week")
                        .HasColumnType("TEXT");

                    b.Property<int?>("YearDayOfMonth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Entities.UserTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Entities.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requester")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamAssignedToId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserAssignedToId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("TeamAssignedToId");

                    b.HasIndex("UserAssignedToId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Entities.WorkOrderHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChangedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderHistories");
                });

            modelBuilder.Entity("Entities.WorkTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreventiveID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreventiveMaintenanceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PreventiveMaintenanceId");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("Entities.Asset", b =>
                {
                    b.HasOne("Entities.Asset", "Parent")
                        .WithMany()
                        .HasForeignKey("AssetParent");

                    b.HasOne("Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.HasOne("Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Entities.LinkPart", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Entities.Location", b =>
                {
                    b.HasOne("Entities.Location", "Parent")
                        .WithMany()
                        .HasForeignKey("IdParent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenance", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Asset");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenanceHistory", b =>
                {
                    b.HasOne("Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById");

                    b.HasOne("Entities.PreventiveMaintenance", "PreventiveMaintenance")
                        .WithMany("PreventiveMaintenanceHistories")
                        .HasForeignKey("PreventiveMaintenanceId");

                    b.Navigation("ChangedBy");

                    b.Navigation("PreventiveMaintenance");
                });

            modelBuilder.Entity("Entities.Request", b =>
                {
                    b.HasOne("Entities.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.UserTeam", b =>
                {
                    b.HasOne("Entities.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.WorkOrder", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Entities.Team", "TeamAssignedTo")
                        .WithMany()
                        .HasForeignKey("TeamAssignedToId");

                    b.HasOne("Entities.User", "UserAssignedTo")
                        .WithMany()
                        .HasForeignKey("UserAssignedToId");

                    b.HasOne("Entities.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Asset");

                    b.Navigation("TeamAssignedTo");

                    b.Navigation("UserAssignedTo");

                    b.Navigation("UserCreatedBy");
                });

            modelBuilder.Entity("Entities.WorkOrderHistory", b =>
                {
                    b.HasOne("Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById");

                    b.HasOne("Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderHistories")
                        .HasForeignKey("WorkOrderId");

                    b.Navigation("ChangedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Entities.WorkTask", b =>
                {
                    b.HasOne("Entities.PreventiveMaintenance", "PreventiveMaintenance")
                        .WithMany("Tasks")
                        .HasForeignKey("PreventiveMaintenanceId");

                    b.Navigation("PreventiveMaintenance");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenance", b =>
                {
                    b.Navigation("PreventiveMaintenanceHistories");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Team", b =>
                {
                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Entities.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
