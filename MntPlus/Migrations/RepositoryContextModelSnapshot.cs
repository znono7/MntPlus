// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace MntPlus.WPF.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AssetCommissionDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("AssetImage")
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("AssetParent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PurchaseCost")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetParent");

                    b.HasIndex("LocationId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Entities.CheckList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("Entities.CheckListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CheckListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IndividualTaskId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("IndividualTaskId");

                    b.ToTable("CheckListItems");
                });

            modelBuilder.Entity("Entities.IndividualTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IndividualTasks");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Cost")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinimumQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PartID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Entities.LinkPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PartId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PartId");

                    b.ToTable("LinkParts");
                });

            modelBuilder.Entity("Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimaryLocation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdParent");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Meter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentReading")
                        .HasColumnType("REAL");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrequencyUnit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("Entities.MeterReading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeterId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Reading")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.HasIndex("UserId");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPerformed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextDue")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("PreventiveMaintenances");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenanceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChangedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreventiveMaintenanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("PreventiveMaintenanceId");

                    b.ToTable("PreventiveMaintenanceHistories");
                });

            modelBuilder.Entity("Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requester")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamAssignedToId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserAssignedToId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("TeamAssignedToId");

                    b.HasIndex("UserAssignedToId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSeeded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduleType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasDiscriminator<string>("ScheduleType").HasValue("Schedule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Entities.UserTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Entities.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requester")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamAssignedToId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserAssignedToId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("TeamAssignedToId");

                    b.HasIndex("UserAssignedToId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Entities.WorkOrderHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ChangedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderHistories");
                });

            modelBuilder.Entity("Entities.DailySchedule", b =>
                {
                    b.HasBaseType("Entities.Schedule");

                    b.HasDiscriminator().HasValue("Daily");
                });

            modelBuilder.Entity("Entities.MonthlyNumericSchedule", b =>
                {
                    b.HasBaseType("Entities.Schedule");

                    b.Property<int>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("MonthlyNumeric");
                });

            modelBuilder.Entity("Entities.MonthlyWeekdaySchedule", b =>
                {
                    b.HasBaseType("Entities.Schedule");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekOfMonth")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("MonthlyWeekday");
                });

            modelBuilder.Entity("Entities.WeeklySchedule", b =>
                {
                    b.HasBaseType("Entities.Schedule");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Weekly");
                });

            modelBuilder.Entity("Entities.YearlyNumericSchedule", b =>
                {
                    b.HasBaseType("Entities.Schedule");

                    b.Property<int>("DayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.ToTable("Schedule", t =>
                        {
                            t.Property("DayOfMonth")
                                .HasColumnName("YearlyNumericSchedule_DayOfMonth");
                        });

                    b.HasDiscriminator().HasValue("YearlyNumeric");
                });

            modelBuilder.Entity("Entities.YearlyOrdinalSchedule", b =>
                {
                    b.HasBaseType("Entities.Schedule");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekOfMonth")
                        .HasColumnType("INTEGER");

                    b.ToTable("Schedule", t =>
                        {
                            t.Property("DayOfWeek")
                                .HasColumnName("YearlyOrdinalSchedule_DayOfWeek");

                            t.Property("Month")
                                .HasColumnName("YearlyOrdinalSchedule_Month");

                            t.Property("WeekOfMonth")
                                .HasColumnName("YearlyOrdinalSchedule_WeekOfMonth");
                        });

                    b.HasDiscriminator().HasValue("YearlyOrdinal");
                });

            modelBuilder.Entity("Entities.Asset", b =>
                {
                    b.HasOne("Entities.Asset", "Parent")
                        .WithMany()
                        .HasForeignKey("AssetParent");

                    b.HasOne("Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Entities.CheckListItem", b =>
                {
                    b.HasOne("Entities.CheckList", "CheckList")
                        .WithMany("CheckListItems")
                        .HasForeignKey("CheckListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.IndividualTask", "IndividualTask")
                        .WithMany("CheckListItems")
                        .HasForeignKey("IndividualTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CheckList");

                    b.Navigation("IndividualTask");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.HasOne("Entities.Part", "Part")
                        .WithMany("Inventories")
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Entities.LinkPart", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany("LinkParts")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Part", "Part")
                        .WithMany("LinkParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Entities.Location", b =>
                {
                    b.HasOne("Entities.Location", "Parent")
                        .WithMany()
                        .HasForeignKey("IdParent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Entities.Meter", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany("Meters")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Entities.MeterReading", b =>
                {
                    b.HasOne("Entities.Meter", "Meter")
                        .WithMany("MeterReadings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Meter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenance", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Asset");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenanceHistory", b =>
                {
                    b.HasOne("Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById");

                    b.HasOne("Entities.PreventiveMaintenance", "PreventiveMaintenance")
                        .WithMany("PreventiveMaintenanceHistories")
                        .HasForeignKey("PreventiveMaintenanceId");

                    b.Navigation("ChangedBy");

                    b.Navigation("PreventiveMaintenance");
                });

            modelBuilder.Entity("Entities.Request", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Entities.Team", "TeamAssignedTo")
                        .WithMany()
                        .HasForeignKey("TeamAssignedToId");

                    b.HasOne("Entities.User", "UserAssignedTo")
                        .WithMany()
                        .HasForeignKey("UserAssignedToId");

                    b.HasOne("Entities.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Asset");

                    b.Navigation("TeamAssignedTo");

                    b.Navigation("UserAssignedTo");

                    b.Navigation("UserCreatedBy");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.HasOne("Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.UserTeam", b =>
                {
                    b.HasOne("Entities.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.WorkOrder", b =>
                {
                    b.HasOne("Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Entities.Team", "TeamAssignedTo")
                        .WithMany()
                        .HasForeignKey("TeamAssignedToId");

                    b.HasOne("Entities.User", "UserAssignedTo")
                        .WithMany()
                        .HasForeignKey("UserAssignedToId");

                    b.HasOne("Entities.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.Navigation("Asset");

                    b.Navigation("TeamAssignedTo");

                    b.Navigation("UserAssignedTo");

                    b.Navigation("UserCreatedBy");
                });

            modelBuilder.Entity("Entities.WorkOrderHistory", b =>
                {
                    b.HasOne("Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById");

                    b.HasOne("Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderHistories")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChangedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Entities.Asset", b =>
                {
                    b.Navigation("LinkParts");

                    b.Navigation("Meters");
                });

            modelBuilder.Entity("Entities.CheckList", b =>
                {
                    b.Navigation("CheckListItems");
                });

            modelBuilder.Entity("Entities.IndividualTask", b =>
                {
                    b.Navigation("CheckListItems");
                });

            modelBuilder.Entity("Entities.Meter", b =>
                {
                    b.Navigation("MeterReadings");
                });

            modelBuilder.Entity("Entities.Part", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("LinkParts");
                });

            modelBuilder.Entity("Entities.PreventiveMaintenance", b =>
                {
                    b.Navigation("PreventiveMaintenanceHistories");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Team", b =>
                {
                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Entities.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
